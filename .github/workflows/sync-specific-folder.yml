name: sync-changed-file
run-name: ${{ github.actor }} is running sync changed file
on:
  pull_request_target:
    branches:
      - main
    types:
      - closed
  push:
    branches:
      - main
permissions:
  contents: write
jobs:
  sync-branch:
    # if: github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'sync-branch')
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      # - name: Checkout node
      #   uses: actions/checkout@v2
      #   with:
      #     fetch-depth: 0
      # - name: Setup actor running workflow
      #   run: |
      #     git config --global user.email "${{ github.actor }}@users.noreply.github.com"
      #     git config --global user.name "${{ github.actor }}"
      # - name: Sync changed file from tartget branch to site branch
      #   continue-on-error: true
      #   run: |
      #       git branch
      #       commit_hash=${{ github.event.pull_request.merge_commit_sha }}
      #       # commit_hash=dc40a099a7e98bdd2791ab583f912143332f34e6
      #       IFS="," read -r -a branches <<< ${{ vars.SITE_BRANCHES }}

      #       # Loop through the array elements
      #       for branch in "${branches[@]}"
      #       do
      #           echo "============================="
      #           echo "\e[33mStart sync branch: $branch\e[0m"
      #           git checkout "$branch"
      #           set +e
      #           git cherry-pick -m 1 "$commit_hash"
      #           cherry_pick_status=$?
      #           set -e
      #           echo "$cherry_pick_status"
      #           # Handle the cherry pick result
      #           if [ $cherry_pick_status -eq 0 ]; then
      #             git push origin $branch
      #             echo "\e[32mCherry pick successful on $branch\e[0m"
      #           else
      #             git cherry-pick --abort
      #             echo "\e[31mCherry pick failed on $branch\e[0m"
      #           fi
      #       done
      - name: Pull code
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ vars.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            whoami
            sudo -u edxapp -s /bin/bash << EOF
              whoami
              cd ${{vars.WORKING_DIR }}
              pwd
              IFS=',' read -ra theme_folders <<< ${{ vars.THEME_FOLDERS }}
              echo "$theme_folders"
              # IFS="," read -r -a branches <<< ${{ vars.SITE_BRANCHES }}
              # Loop through each branch and pull the latest code
              for theme in "\${theme_folders[@]}"
              do
                echo "checkout & pull \$theme"
                cd "\$theme" 
                pwd
                git branch
                cd ..
                # git checkout "${branches[i]}"
              #   if [ $? -eq 0 ]; then
              #     git restore .
              #     git pull
              #     if [ $? -eq 0 ]; then
              #       echo "Successfully pulled latest code for theme '$theme'. \n"
              #       cd ..
              #     else
              #       echo "\e[31mFailed to pull code for theme '$theme'.\e[0m"
              #       exit 0
              #     fi
              #   else
              #     echo "Failed to checkout theme '$theme'."
              #     exit 0
              #   fi
              done
              echo "Successfully pulled all branch in"
            EOF
      # - name: Configure SSH
      #   run: |
      #       sudo apt update && sudo apt install openssh-server && sudo systemctl start ssh
      #       mkdir -p ~/.ssh/
      #       echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
      #       chmod 600 ~/.ssh/id_rsa
      #       ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
      # - name: Pull code in production environment
      #   run: |
      #     ssh ${{ secrets.USERNAME }}@${{ secrets.SERVER_HOST }} && pwd
      #     whoami
      #     # IFS="," read -r -a theme_folders <<< ${{ vars.SITE_BRANCHES }}
      #     # # IFS="," read -r -a branches <<< ${{ vars.SITE_BRANCHES }}
      #     # # Loop through each branch and pull the latest code
      #     # for theme in "${theme_folders[@]}"
      #     # do
      #     #   echo "checkout & pull '$theme'"
      #     #   sudo -u edxapp bash -c 'cd ${{vars.WORKING_DIR }}/$theme && git pull'
      #     #   git checkout "${branches[i]}"
      #     #   if [ $? -eq 0 ]; then
      #     #     git restore .
      #     #     git pull origin "${branches[i]}"
      #     #     if [ $? -eq 0 ]; then
      #     #       echo "Successfully pulled latest code for branch '${branches[i]}'. \n"
      #     #       cd ..
      #     #     else
      #     #       echo "Failed to pull code for branch '${branches[i]}'."
      #     #       exit 0
      #     #     fi
      #     #   else
      #     #     echo "Failed to checkout branch '${branches[i]}'."
      #     #     exit 0
      #     #   fi
      #     # done
      #     echo "Successfully pulled all branch in ${branches}"

